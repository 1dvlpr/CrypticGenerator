---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Passw*rd Generator">
  <main>
    <span class="glowable one"></span>
    <span class="glowable two"></span>
    <h1>Cryptic Generator</h1>
    <textarea
      id="inputbox"
      class="input-box"
      title="password"
      disabled
      placeholder="Generate passw*rds"></textarea>
    <button disabled id="copy">Copy</button>
    <div class="gen-parent">
      <button id="generate" class="generate-btn">Generate</button>
      <input
        maxlength="4"
        value="32"
        oninput="
        javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);
        "
        required
        type="number"
        id="len"
        placeholder="32"
      />
    </div>
    <a
      href="https://github.com/1dvlpr/CrypticGenerator"
      id="github"
      target="_blank"
      rel="noopener">Source Code</a
    >
  </main>
</Layout>

<style>
  main {
    animation: 0.3s 0.2s fade forwards;
    opacity: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: rgb(231, 231, 231);
    font-size: 20px;
    line-height: 1.6;
    gap: 32px;
    height: 92vh;
    justify-content: center;
    transition: 0.2s cubic-bezier(0.51, 0.69, 0.46, 0.96);
  }
  h1 {
    animation-timing-function: cubic-bezier(0.51, 0.69, 0.46, 0.96);
    animation-delay: 0.9s;
    animation-duration: 0.2s;
    animation-name: fade;
    opacity: 0;
    animation-fill-mode: forwards;
    font-size: 48px;
    margin: 0;
  }
  textarea {
    -ms-overflow-style: none; /* Internet Explorer 10+ */
    scrollbar-width: none; /* Firefox */
    resize: none;
    overflow-y: auto;
    word-wrap: break-word;
  }
  textarea::-webkit-scrollbar {
    display: none; /* Safari and Chrome */
  }
  input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
  }
  textarea,
  input {
    font-size: 16px;
    color: rgb(187, 187, 187);
    animation-timing-function: cubic-bezier(0.51, 0.69, 0.46, 0.96);
    animation-delay: 1s;
    animation-duration: 0.2s;
    animation-name: fade;
    animation-fill-mode: forwards;
    padding: 12px 24px;
    background: #181a1a;
    border-radius: 12px;
    width: 60%;
    border: 1px solid #292929;
    font-family: "JetBrains Mono", "DM Sans";
    opacity: 0;
    transition: 0.2s cubic-bezier(0.51, 0.69, 0.46, 0.96);
  }
  .gen-parent {
    display: flex;
    gap: 12px;
  }
  .gen-parent input {
    width: 45px;
    text-align: center;
    padding: 8px;
  }
  .generate-btn {
    opacity: 0;
    animation-timing-function: cubic-bezier(0.51, 0.69, 0.46, 0.96);
    animation-delay: 1.1s;
    animation-duration: 0.2s;
    animation-name: fade;
    animation-fill-mode: forwards;
    padding: 8px 16px;
    background: #49cfcf;
    border-radius: 12px;
    color: #181a1a;
    cursor: pointer;
    font-size: 18px;
    border: 1px solid #292929;
    font-family: "DM Sans";
    transition: 0.2s cubic-bezier(0.51, 0.69, 0.46, 0.96);
  }

  .glowable {
    opacity: 0;
    animation-timing-function: cubic-bezier(0.51, 0.69, 0.46, 0.96);
    animation-delay: 1.3s;
    animation-duration: 0.8s;
    animation-name: glow-fade-1;
    animation-fill-mode: forwards;

    filter: blur(6px);
    position: absolute;
    top: 0%;
    left: -40%;
    width: 120vh;
    height: 95vh;
    transition: 0.2s cubic-bezier(0.51, 0.69, 0.46, 0.96);
    background: radial-gradient(circle, #49cfcfc9 0%, rgba(0, 0, 0, 0) 70%);
  }

  .two {
    animation-delay: 1.5s !important;
    animation-duration: 0.8s !important;
    animation-name: glow-fade-2 !important;

    position: absolute;
    left: inherit;
    top: -120px;
    right: 0px;
    width: 60vh;
    height: 60vh;
  }

  #copy {
    opacity: 0;
    animation-timing-function: cubic-bezier(0.51, 0.69, 0.46, 0.96);
    animation-delay: 1.5s;
    animation-duration: 0.2s;
    animation-name: fade;
    animation-fill-mode: forwards;
    transition: 0.3s cubic-bezier(0.51, 0.69, 0.46, 0.96);

    cursor: pointer;
    position: relative;
    left: 29%;
    top: -11%;
    border: 1px solid #292929;
    background: #0e0f0f;
    margin-bottom: -56px;
    padding: 4px 8px;
    border-radius: 6px;
    color: rgb(187, 187, 187);
    font-family: "DM Sans";
  }

  #copy:disabled {
    opacity: 0.3 !important;
    cursor: not-allowed;
  }

  .clicked-copy {
    border: 1px solid rgb(0, 136, 0) !important;
  }

  #github {
    position: absolute;
    bottom: 10px;
    right: 10px;
    padding: 8px 16px;
    border: 1px solid #292929;
    background: #171818;
    text-decoration: none;
    font-family: "JetBrains Mono";
    transition: 0.3s cubic-bezier(0.51, 0.69, 0.46, 0.96);
    border-radius: 14px;
    color: rgb(187, 187, 187);
    opacity: 0.7;
  }

  #github:hover {
    opacity: 1;
    transform: scale(0.95);
  }

  @keyframes fade {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @keyframes glow-fade-1 {
    0% {
      opacity: 0;
      top: -100%;
      left: -100%;
    }
    100% {
      opacity: 0.2;
      top: 0%;
      left: -40%;
    }
  }

  @keyframes glow-fade-2 {
    0% {
      opacity: 0;
      left: inherit;
      top: -100%;
      right: 0px;
    }
    100% {
      opacity: 0.1;
      left: inherit;
      top: -120px;
      right: 0px;
    }
  }

  @media only screen and (max-width: 750px) {
    textarea {
      width: 95%;
    }

    #copy {
      left: 46%;
    }

    .one {
      display: none;
    }
  }
</style>

<script>
  const button = document.getElementById("generate");
  button.addEventListener("click", () => generate());

  const copy = document.getElementById("copy");
  copy.addEventListener("click", (ev) =>
    handleCopies(
      ev,
      (document.getElementById("inputbox") as HTMLInputElement).value
    )
  );

  const timer = (ms) => new Promise((res) => setTimeout(res, ms));

  function handleCopies(event: MouseEvent, text: string) {
    var target = event.currentTarget as Element;
    navigator.clipboard.writeText(text);

    target.classList.toggle("clicked-copy");
    target.innerHTML = "👍";
    setTimeout(() => {
      target.classList.toggle("clicked-copy");
      target.innerHTML = "Copy";
    }, 5000);
  }

  async function generate() {
    let characters = [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "0",
      "/",
      "?",
      "<",
      ">",
      "[",
      "]",
      "{",
      "}",
      "(",
      ")",
      "!",
      "@",
      "#",
      "$",
      "%",
      "^",
      "&",
      "*",
      "_",
      "-",
    ];
    let inp = document.getElementById("inputbox");
    let len = document.getElementById("len");

    (document.getElementById("copy") as HTMLButtonElement).disabled = false;

    (len as HTMLInputElement).value = String(
      Number((len as HTMLInputElement).value) < 8
        ? 32
        : Number((len as HTMLInputElement).value)
    );
    //setting value to blank
    (inp as HTMLTextAreaElement).value = "";

    (inp as HTMLTextAreaElement).value =
      characters[
        window.crypto.getRandomValues(new Uint16Array(1))[0] % characters.length
      ];
    //for loop
    for (let i = 0; i < Number((len as HTMLTextAreaElement).value); i++) {
      (inp as HTMLInputElement).value =
        (inp as HTMLInputElement).value +
        characters[
          window.crypto.getRandomValues(new Uint16Array(1))[0] %
            characters.length
        ];
      await timer(2);
    }
  }
</script>
